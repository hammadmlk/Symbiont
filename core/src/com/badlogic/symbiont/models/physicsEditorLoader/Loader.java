package com.badlogic.symbiont.models.physicsEditorLoader;

import java.util.HashMap;
import java.util.Map;

import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.files.FileHandle;
import com.badlogic.gdx.math.Vector2;
import com.badlogic.gdx.physics.box2d.Body;
import com.badlogic.gdx.physics.box2d.CircleShape;
import com.badlogic.gdx.physics.box2d.FixtureDef;
import com.badlogic.gdx.physics.box2d.PolygonShape;
import com.badlogic.gdx.utils.Json;
import com.badlogic.symbiont.models.GameConstants;

/**
 * This class loads the files generated by the physics editor
 * tool found here http://www.aurelienribon.com/blog/projects/physics-body-editor/
 */
public class Loader {

    private final Map<String, RigidBody> rigidBodyMap;

    public Loader(String file) {
        FileHandle fileHandle = Gdx.files.internal(file);
        rigidBodyMap = new HashMap<String, RigidBody>();
        Json json = new Json();
        // we want to ignore dynamicBodies and shapes
        json.setIgnoreUnknownFields(true);
        Base base = json.fromJson(Base.class, fileHandle.readString());
        for (RigidBody rigidBody : base.rigidBodies) {
            rigidBodyMap.put(rigidBody.name, rigidBody);
        }
    }

    public void attach(
            Body body,
            String name,
            FixtureDef fixtureDef,
            float scale,
            float imgWidth,
            float imgHeight,
            boolean flipHorizontal,
            boolean flipVertical
    ) {
        float combinedScale = scale * imgWidth / GameConstants.PIXELS_PER_METER;
        RigidBody rigidBody = rigidBodyMap.get(name);
        Vector2 origin = new Vector2(rigidBody.origin.x, rigidBody.origin.y).scl(combinedScale);
        for (Circle circle : rigidBody.circles) {
            CircleShape circleShape = new CircleShape();
            circleShape.setRadius(circle.r * combinedScale);
            circleShape.setPosition(new Vector2(
                    flipHorizontal ? 1 - circle.cx : circle.cx,
                    flipVertical ? imgHeight / imgWidth - circle.cy : circle.cy
            ).scl(combinedScale).sub(origin.x, origin.y));
            fixtureDef.shape = circleShape;
            body.createFixture(fixtureDef);
            fixtureDef.shape.dispose();
        }
        for (Vector2[] vertices : rigidBody.polygons) {
            Vector2[] scaledVertices = new Vector2[vertices.length];
            for (int i = 0; i < vertices.length; i++) {
                scaledVertices[i] = new Vector2(
                        flipHorizontal ? 1 - vertices[i].x : vertices[i].x,
                        flipVertical ?  imgHeight / imgWidth - vertices[i].y : vertices[i].y
                ).scl(combinedScale).sub(origin.x, origin.y);
            }
            PolygonShape polygonShape = new PolygonShape();
            polygonShape.set(scaledVertices);
            fixtureDef.shape = polygonShape;
            body.createFixture(fixtureDef);
            fixtureDef.shape.dispose();
        }
    }

    public RigidBody getRigidBody(String name) {
        return rigidBodyMap.get(name);
    }
}
